// Generated by CoffeeScript 1.10.0
(function() {
  var HachrazatRoshChodesh, HebrewDate, HebrewMonth, HebrewYear, Molad, RoshHashana, Sedra, leapMonthsElapsedInCurrent19YearCycle, leapMonthsInHistory, positive_modulus, weekdays,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  weekdays = typeof moment !== "undefined" && moment !== null ? moment.weekdays : (function(i) {
    return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'][i];
  });

  HachrazatRoshChodesh = (function() {
    function HachrazatRoshChodesh(hebrew_date) {
      var dayOfWeek1, dayOfWeek1Index, dayOfWeek30, hachrazahIsSameDayAsMolad, hebrewYear, is2Days, molad, moladHours, moladIsWeekBeforeRoshHodesh, moladMinutes, monthIndex, months, pm, roshHashana, yesterday;
      hebrewYear = hebrew_date.getHebrewYear();
      months = HebrewMonth.MONTHS.ofYear(hebrewYear);
      monthIndex = months.indexOf(hebrew_date.staticHebrewMonth) + 1;
      if (monthIndex >= months.length) {
        monthIndex = monthIndex % months.length;
        roshHashana = hebrewYear.getNextRoshHashana();
      } else {
        roshHashana = hebrewYear.getThisRoshHashana();
      }
      this.name = months[monthIndex].name;
      molad = roshHashana.getMolad().advance(monthIndex);
      moladHours = molad.getHours() - 6;
      yesterday = moladHours < 0;
      pm = yesterday || moladHours >= 12;
      moladHours = (moladHours + 12) % 12;
      if (0 === moladHours) {
        moladHours = 12;
      }
      moladMinutes = ("0" + (parseInt(molad.getHalakim() / 18))).slice(-2);
      this.moladHalakim = molad.getHalakim() % 18;
      this.dayOfMolad = (function() {
        switch (false) {
          case !(0 === molad.getDay() && yesterday):
            return "מוֹצָאֵי שַּׁבָּת";
          case 6 !== molad.getDay():
            return (yesterday ? "לֵיל " : "") + "שַּׁבָּת";
          default:
            return "" + (weekdays(molad.getDay() - (yesterday ? 1 : 0))) + (yesterday ? " night" : "");
        }
      })();
      is2Days = 30 === hebrew_date.getHebrewMonth().getLength();
      this.moladTime = moladHours + ":" + moladMinutes + (pm ? "P" : "A") + "M";
      dayOfWeek1Index = hebrew_date.getHebrewMonth().getNextRoshHodesh().getDay();
      dayOfWeek1 = HEBREW_DAYS[dayOfWeek1Index];
      dayOfWeek30 = HEBREW_DAYS[(dayOfWeek1Index + 6) % 7];
      this.fullDayOfWeekPhrase = "בְּיוֹם " + (is2Days ? dayOfWeek30 + " וּבְיוֹם " : "") + dayOfWeek1;
      moladIsWeekBeforeRoshHodesh = dayOfWeek1Index < molad.getDay() && dayOfWeek1Index >= (is2Days ? 1 : 0);
      hachrazahIsSameDayAsMolad = "שַּׁבָּת" === this.dayOfMolad && moladIsWeekBeforeRoshHodesh;
      this.verb = (function() {
        switch (false) {
          case !hachrazahIsSameDayAsMolad:
            return "is [today]";
          case !moladIsWeekBeforeRoshHodesh:
            return "was on";
          default:
            return "will be on";
        }
      })();
    }

    HachrazatRoshChodesh.prototype.sephardicAnnouncement = function() {
      return "בְּסִימַן טוֹב יְהֵא לָנוּ רֹאשׁ חֹדֶשׁ " + this.name + " " + this.fullDayOfWeekPhrase;
    };

    HachrazatRoshChodesh.prototype.ashkenazicAnnouncement = function() {
      return "רֹאשׁ חֹדֶשׁ " + this.name + " יִהְיֶה " + this.fullDayOfWeekPhrase + " הַבָּא עָלֵינוּ וְעַל כָּל-יִשְׂרָאֵל לְטוֹבָה";
    };

    HachrazatRoshChodesh.prototype.moladAnnouncement = function() {
      return "The מוֹלַד of חֹדֶשׁ " + this.name + " " + this.verb + " " + this.dayOfMolad + " at " + this.moladTime + " and " + this.moladHalakim + " " + (1 === this.moladHalakim ? "חֵלֶק" : "חָלָקִים");
    };

    return HachrazatRoshChodesh;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).HEBREW_DAYS = ['רִאשׁוֹן', 'שֵׁנִי', 'שְׁלִישִׁי', 'רְבִיעִי', 'חֲמִישִׁי', 'הַשִּׁשִּׁי', 'שַּׁבָּת קֹדֶשׁ'];

  (typeof exports !== "undefined" && exports !== null ? exports : this).HachrazatRoshChodesh = HachrazatRoshChodesh;

  HebrewDate = (function() {
    function HebrewDate(date) {
      var dayOfMonth, length, month, months;
      this.gregorianDate = date;
      this.hebrewYear = new HebrewYear(date);
      this.dayOfYear = parseInt(HebrewDate.HELPERS.durationInGregorianDays(date, this.hebrewYear.getThisRoshHashana().getGregorianDate()) + 1);
      dayOfMonth = this.dayOfYear;
      months = HebrewMonth.MONTHS.ofYear(this.hebrewYear);
      month = 0;
      while (dayOfMonth > (length = months[month].length(this.hebrewYear))) {
        dayOfMonth -= length;
        ++month;
      }
      this.hebrewMonth = new HebrewMonth(this.hebrewYear, month);
      this.staticHebrewMonth = months[month];
      this.dayOfMonth = dayOfMonth;
    }

    HebrewDate.prototype.getHebrewYear = function() {
      return this.hebrewYear;
    };

    HebrewDate.prototype.getHebrewMonth = function() {
      return this.hebrewMonth;
    };

    HebrewDate.prototype.getYearFromCreation = function() {
      return this.hebrewYear.getYearFromCreation();
    };

    HebrewDate.prototype.getDayOfYear = function() {
      return this.dayOfYear;
    };

    HebrewDate.prototype.getDayOfMonth = function() {
      return this.dayOfMonth;
    };

    HebrewDate.prototype.monthAndRangeAre = function(month, range) {
      var ref;
      return this.staticHebrewMonth === HebrewMonth[month] && (ref = this.dayOfMonth, indexOf.call(range, ref) >= 0);
    };

    HebrewDate.prototype.isErebShabbat = function() {
      return 5 === this.gregorianDate.getDay();
    };

    HebrewDate.prototype.isShabbat = function() {
      return 6 === this.gregorianDate.getDay();
    };

    HebrewDate.prototype.adarOrAdar2 = function() {
      if (this.hebrewYear.isLeapYear()) {
        return 'ADAR_SHENI';
      } else {
        return 'ADAR';
      }
    };

    HebrewDate.prototype.isPurim = function() {
      return this.monthAndRangeAre(this.adarOrAdar2(), [14]);
    };

    HebrewDate.prototype.isShushanPurim = function() {
      return this.monthAndRangeAre(this.adarOrAdar2(), [15]);
    };

    HebrewDate.prototype.isPurimKatan = function() {
      return this.monthAndRangeAre('ADAR_RISHON', [14]);
    };

    HebrewDate.prototype.isShushanPurimKatan = function() {
      return this.monthAndRangeAre('ADAR_RISHON', [15]);
    };

    HebrewDate.prototype.isMoed = function() {
      return this.monthAndRangeAre('NISAN', [17, 18, 19, 20]) || this.monthAndRangeAre('TISHRI', [17, 18, 19, 20, 21]);
    };

    HebrewDate.prototype.isPesach = function() {
      return this.monthAndRangeAre('NISAN', [15, 16, 17, 18, 19, 20, 21, 22]);
    };

    HebrewDate.prototype.isShabuot = function() {
      return this.monthAndRangeAre('SIVAN', [6, 7]);
    };

    HebrewDate.prototype.isRoshHashana = function() {
      return this.monthAndRangeAre('TISHRI', [1, 2]);
    };

    HebrewDate.prototype.is10DaysOfTeshuba = function() {
      return this.monthAndRangeAre('TISHRI', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
    };

    HebrewDate.prototype.isYomKippur = function() {
      return this.monthAndRangeAre('TISHRI', [10]);
    };

    HebrewDate.prototype.isSukkot = function() {
      return this.monthAndRangeAre('TISHRI', [15, 16, 17, 18, 19, 20, 21, 22, 23]);
    };

    HebrewDate.prototype.isRegel = function() {
      return this.isPesach() || this.isShabuot() || this.isSukkot();
    };

    HebrewDate.prototype.isErebYomTob = function() {
      return this.monthAndRangeAre('NISAN', [14, 20]) || this.monthAndRangeAre('SIVAN', [5]) || this.monthAndRangeAre('ELUL', [29]) || this.monthAndRangeAre('TISHRI', [14, 21]);
    };

    HebrewDate.prototype.isYomTob = function() {
      return this.monthAndRangeAre('NISAN', [15, 16, 21, 22]) || this.isShabuot() || this.monthAndRangeAre('TISHRI', [1, 2, 15, 16, 22, 23]);
    };

    HebrewDate.prototype.isChanukkah = function() {
      var j, ref, results;
      return this.monthAndRangeAre('KISLEV', [25, 26, 27, 28, 29, 30]) || this.monthAndRangeAre('TEVET', (function() {
        results = [];
        for (var j = 1, ref = (this.hebrewYear.getDaysInYear() % 10 > 3 ? 2 : 3); 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--){ results.push(j); }
        return results;
      }).apply(this));
    };

    HebrewDate.prototype.isRoshHodesh = function() {
      return (1 === this.dayOfMonth && this.staticHebrewMonth !== HebrewMonth.TISHRI) || 30 === this.dayOfMonth;
    };

    HebrewDate.prototype.isBeginTalUmatar = function() {
      return this.gregorianDate.getMonth() === 11 && this.gregorianDate.getDate() === (parseInt((this.gregorianDate.getFullYear()) / 100) - parseInt((this.gregorianDate.getFullYear()) / 400) - 11 + parseInt((4 - (this.gregorianDate.getFullYear() + 1) % 4) / 4));
    };

    HebrewDate.prototype.isMaharHodesh = function() {
      return 29 === this.dayOfMonth && this.isShabbat();
    };

    HebrewDate.prototype.inElul = function() {
      return this.staticHebrewMonth === HebrewMonth.ELUL;
    };

    HebrewDate.prototype.isShabbatMevarechim = function() {
      var ref;
      return (ref = this.dayOfMonth, indexOf.call([23, 24, 25, 26, 27, 28, 29], ref) >= 0) && this.isShabbat() && !this.inElul();
    };

    HebrewDate.prototype.isHachrazatTaanit = function() {
      return this.isShabbat() && (this.monthAndRangeAre('TEVET', [4, 5, 6, 7, 8, 9]) || this.monthAndRangeAre('TAMUZ', [11, 12, 13, 14, 15, 16, 17]));
    };

    HebrewDate.prototype.isShabbatSheqalim = function() {
      return this.isShabbat() && (this.monthAndRangeAre((this.hebrewYear.isLeapYear() ? 'ADAR_RISHON' : 'SHEBAT'), [25, 26, 27, 28, 29, 30]) || this.monthAndRangeAre(this.adarOrAdar2(), [1]));
    };

    HebrewDate.prototype.isShabbatZachor = function() {
      return this.isShabbat() && this.monthAndRangeAre(this.adarOrAdar2(), [8, 9, 10, 11, 12, 13]);
    };

    HebrewDate.prototype.isShabbatParah = function() {
      return this.isShabbat() && this.monthAndRangeAre(this.adarOrAdar2(), [18, 19, 20, 21, 22, 23]);
    };

    HebrewDate.prototype.isShabbatHaHodesh = function() {
      return this.isShabbat() && (this.monthAndRangeAre(this.adarOrAdar2(), [25, 26, 27, 28, 29]) || this.monthAndRangeAre('NISAN', [1]));
    };

    HebrewDate.prototype.isShabbatHaGadol = function() {
      return this.isShabbat() && this.monthAndRangeAre('NISAN', [8, 9, 10, 11, 12, 13, 14]);
    };

    HebrewDate.prototype.isTuBiShvat = function() {
      return this.monthAndRangeAre('SHEBAT', [15]);
    };

    HebrewDate.prototype.isPesachSheni = function() {
      return this.monthAndRangeAre('IYAR', [14]);
    };

    HebrewDate.prototype.isLagLaomer = function() {
      return this.monthAndRangeAre('IYAR', [18]);
    };

    HebrewDate.prototype.isTuBAb = function() {
      return this.monthAndRangeAre('AB', [15]);
    };

    HebrewDate.prototype.is17Tammuz = function() {
      return !this.isShabbat() && this.monthAndRangeAre('TAMUZ', 0 === this.gregorianDate.getDay() ? [17, 18] : [17]);
    };

    HebrewDate.prototype.is9Ab = function() {
      return !this.isShabbat() && this.monthAndRangeAre('AB', 0 === this.gregorianDate.getDay() ? [9, 10] : [9]);
    };

    HebrewDate.prototype.isFastOfGedaliah = function() {
      return !this.isShabbat() && this.monthAndRangeAre('TISHRI', 0 === this.gregorianDate.getDay() ? [4] : [3]);
    };

    HebrewDate.prototype.is10Tevet = function() {
      return this.monthAndRangeAre('TEVET', [10]);
    };

    HebrewDate.prototype.isTaanitEster = function() {
      return !this.isShabbat() && this.monthAndRangeAre(this.adarOrAdar2(), 4 === this.gregorianDate.getDay() ? [11, 13] : [13]);
    };

    HebrewDate.prototype.isEreb9Av = function() {
      return !this.isErebShabbat() && this.monthAndRangeAre('AB', this.isShabbat() ? [8, 9] : [8]);
    };

    HebrewDate.prototype.isErebYomKippur = function() {
      return this.monthAndRangeAre('TISHRI', [9]);
    };

    HebrewDate.prototype.is1stDayOfYomTob = function() {
      return this.monthAndRangeAre('NISAN', [15, 21]) || this.is1stDayOfShabuot() || this.monthAndRangeAre('TISHRI', [1, 15, 22]);
    };

    HebrewDate.prototype.is1stDayOfShabuot = function() {
      return this.monthAndRangeAre('SIVAN', [6]);
    };

    HebrewDate.prototype.is6thDayOfPesach = function() {
      return this.monthAndRangeAre('NISAN', [20]);
    };

    HebrewDate.prototype.is7thDayOfPesach = function() {
      return this.monthAndRangeAre('NISAN', [21]);
    };

    HebrewDate.prototype.isErubTabshilin = function() {
      var ref;
      return this.isErebYomTob() && ((ref = this.gregorianDate.getDay()) === 3 || ref === 4);
    };

    HebrewDate.prototype.isTaanit = function() {
      return this.is9Ab() || this.is17Tammuz() || this.isFastOfGedaliah() || this.isTaanitEster() || this.is10Tevet();
    };

    HebrewDate.prototype.isHataratNedarim = function() {
      return this.monthAndRangeAre('AB', [19, 29]) || this.monthAndRangeAre('ELUL', [29]) || this.monthAndRangeAre('TISHRI', [9]);
    };

    HebrewDate.prototype.isErebPesach = function() {
      return this.monthAndRangeAre('NISAN', [14]);
    };

    HebrewDate.prototype.is1stDayOfPesach = function() {
      return this.monthAndRangeAre('NISAN', [15]);
    };

    HebrewDate.prototype.is2ndDayOfPesach = function() {
      return this.monthAndRangeAre('NISAN', [16]);
    };

    HebrewDate.prototype.is8thDayOfPesach = function() {
      return this.monthAndRangeAre('NISAN', [22]);
    };

    HebrewDate.prototype.isErebShabuot = function() {
      return this.monthAndRangeAre('SIVAN', [5]);
    };

    HebrewDate.prototype.isErebRoshHashana = function() {
      return this.monthAndRangeAre('ELUL', [29]);
    };

    HebrewDate.prototype.isErebSukkot = function() {
      return this.monthAndRangeAre('TISHRI', [14]);
    };

    HebrewDate.prototype.isHoshanaRaba = function() {
      return this.monthAndRangeAre('TISHRI', [21]);
    };

    HebrewDate.prototype.isSheminiAseret = function() {
      return this.monthAndRangeAre('TISHRI', [22, 23]);
    };

    HebrewDate.prototype.isBirkatHaIlanot = function() {
      return !this.isShabbat() && this.monthAndRangeAre('NISAN', 0 === this.gregorianDate.getDay() ? [1, 2] : [1]);
    };

    HebrewDate.prototype.isTefilatHaShelah = function() {
      return this.monthAndRangeAre('IYAR', [29]);
    };

    HebrewDate.prototype.is2ndDayOfYomTob = function() {
      return this.is2ndDayOfPesach() || this.is8thDayOfPesach() || this.monthAndRangeAre('SIVAN', [7]) || this.monthAndRangeAre('TISHRI', [2, 16, 23]);
    };

    HebrewDate.prototype.isErebHoshanaRaba = function() {
      return this.monthAndRangeAre('TISHRI', [20]);
    };

    HebrewDate.prototype.weekOfYear = function() {
      return parseInt((this.dayOfYear + 11 - this.gregorianDate.getDay()) / 7) + (6 === this.hebrewYear.getThisRoshHashana().getGregorianDate().getDay() ? 1 : 0);
    };

    HebrewDate.prototype.occasions = function() {
      var alias, chag, ref, result, val;
      result = [];
      for (chag in this) {
        val = this[chag];
        if (chag.match(/^is/) && this[chag]() && !(ref = this[chag], indexOf.call((function() {
          var j, len, results;
          results = [];
          for (j = 0, len = result.length; j < len; j++) {
            alias = result[j];
            results.push(this["is" + alias]);
          }
          return results;
        }).call(this), ref) >= 0)) {
          result.push(chag.replace(/^is/, ''));
        }
      }
      return result.sort();
    };

    HebrewDate.prototype.sedra = function() {
      return this.hebrewYear.sedrot().sedra(this);
    };

    HebrewDate.prototype.omer = function() {
      return this._omer != null ? this._omer : this._omer = ((function() {
        switch (this.staticHebrewMonth) {
          case HebrewMonth.NISAN:
            if (this.dayOfMonth > 15) {
              return {
                today: this.dayOfMonth - 15,
                tonight: this.dayOfMonth - 14
              };
            } else if (15 === this.dayOfMonth) {
              return {
                tonight: this.dayOfMonth - 14
              };
            } else {
              return null;
            }
          case HebrewMonth.IYAR:
            return {
              today: 15 + this.dayOfMonth,
              tonight: 16 + this.dayOfMonth
            };
          case HebrewMonth.SIVAN:
            if (this.dayOfMonth < 5) {
              return {
                today: this.dayOfMonth + 44,
                tonight: this.dayOfMonth + 45
              };
            } else if (5 === this.dayOfMonth) {
              return {
                today: this.dayOfMonth + 44
              };
            } else {
              return null;
            }
          default:
            return null;
        }
      }).call(this));
    };

    return HebrewDate;

  })();

  (function() {
    return this.HELPERS = {
      incrementDate: function(date, length) {
        return date.setDate(date.getDate() + length);
      },
      durationInGregorianDays: function(end_date, begin_date) {
        return (end_date - begin_date) / 1000 / 60 / 60 / 24;
      },
      durationInHebrewDays: function(end_date, begin_date) {
        return this.durationInGregorianDays(end_date.getGregorianDate(), begin_date.getGregorianDate());
      }
    };
  }).call(HebrewDate);

  HebrewDate.prototype.isRoshHaShana = HebrewDate.prototype.isRoshHaShanah = HebrewDate.prototype.isRoshHashanah = HebrewDate.prototype.isRoshHashana;

  HebrewDate.prototype.isYomTov = HebrewDate.prototype.isYomTob;

  HebrewDate.prototype.isRoshChodesh = HebrewDate.prototype.isRoshHodesh;

  HebrewDate.prototype.isLagBaOmer = HebrewDate.prototype.isLagLaOmer = HebrewDate.prototype.isLagBaomer = HebrewDate.prototype.isLagLaomer;

  HebrewDate.prototype.isHanuka = HebrewDate.prototype.isHanukka = HebrewDate.prototype.isHanukah = HebrewDate.prototype.isHanukkah = HebrewDate.prototype.isChanuka = HebrewDate.prototype.isChanukka = HebrewDate.prototype.isChanukah = HebrewDate.prototype.isChanukkah;

  HebrewDate.prototype.is17Tamuz = HebrewDate.prototype.is17Tammuz;

  HebrewDate.prototype.is9Av = HebrewDate.prototype.is9Ab;

  HebrewDate.prototype.isTzomGedalia = HebrewDate.prototype.isTzomGedaliah = HebrewDate.prototype.isFastOfGedalia = HebrewDate.prototype.isFastOfGedaliah;

  HebrewDate.prototype.isTaanitEsther = HebrewDate.prototype.isTaanitEster;

  HebrewDate.prototype.isEreb9Ab = HebrewDate.prototype.isEreb9Av;

  (typeof exports !== "undefined" && exports !== null ? exports : this).HebrewDate = HebrewDate;

  HebrewMonth = (function() {
    function HebrewMonth(hebrewYear, hebrewMonthIndex) {
      var i;
      this.hebrewYear = hebrewYear;
      this.monthsOfYear = HebrewMonth.MONTHS.ofYear(hebrewYear);
      this.hebrewMonth = this.monthsOfYear[hebrewMonthIndex];
      this.length = this.hebrewMonth.length(hebrewYear);
      this.gregorianDateOfThisRoshHodesh = new Date(hebrewYear.getThisRoshHashana().getGregorianDate());
      i = 0;
      while (i < hebrewMonthIndex) {
        HebrewDate.HELPERS.incrementDate(this.gregorianDateOfThisRoshHodesh, this.monthsOfYear[i].length(hebrewYear));
        ++i;
      }
      this.gregorianDateOfNextRoshHodesh = new Date(this.gregorianDateOfThisRoshHodesh);
      HebrewDate.HELPERS.incrementDate(this.gregorianDateOfNextRoshHodesh, this.length);
    }

    HebrewMonth.prototype.getLength = function() {
      return this.length;
    };

    HebrewMonth.prototype.getName = function() {
      return this.hebrewMonth.name;
    };

    HebrewMonth.prototype.getThisRoshHodesh = function() {
      return this.gregorianDateOfThisRoshHodesh;
    };

    HebrewMonth.prototype.getNextRoshHodesh = function() {
      return this.gregorianDateOfNextRoshHodesh;
    };

    return HebrewMonth;

  })();

  (function() {
    var month;
    this.TISHRI = this.TISHREI = {
      name: "תִּשְׁרִי",
      length: function(year) {
        return 30;
      }
    };
    this.HESHVAN = this.CHESHVAN = {
      name: "מַרְחֶשְׁוָן",
      length: function(year) {
        if (year.getDaysInYear() % 10 > 4) {
          return 30;
        } else {
          return 29;
        }
      }
    };
    this.KISLEV = {
      name: "כִּסְלֵו",
      length: function(year) {
        if (year.getDaysInYear() % 10 > 3) {
          return 30;
        } else {
          return 29;
        }
      }
    };
    this.TEBET = this.TEVET = {
      name: "טֵבֵת",
      length: function(year) {
        return 29;
      }
    };
    this.SHEBAT = this.SHEVAT = {
      name: "שְׁבָט",
      length: function(year) {
        return 30;
      }
    };
    this.ADAR = {
      name: "אֲדָר",
      length: function(year) {
        if (year.isLeapYear()) {
          return null;
        } else {
          return 29;
        }
      }
    };
    this.ADAR_RISHON = {
      name: "אֲדָר רִאשׁוֹן",
      length: function(year) {
        if (year.isLeapYear()) {
          return 30;
        } else {
          return null;
        }
      }
    };
    this.ADAR_SHENI = {
      name: "אֲדָר שֵׁנִי",
      length: function(year) {
        if (year.isLeapYear()) {
          return 29;
        } else {
          return null;
        }
      }
    };
    this.NISAN = this.NISSAN = {
      name: "נִיסָן",
      length: function(year) {
        return 30;
      }
    };
    this.IYAR = {
      name: "אִיָּר",
      length: function(year) {
        return 29;
      }
    };
    this.SIVAN = {
      name: "סִיוָן",
      length: function(year) {
        return 30;
      }
    };
    this.TAMUZ = this.TAMMUZ = {
      name: "תַּמּוּז",
      length: function(year) {
        return 29;
      }
    };
    this.AB = this.AV = {
      name: "אָב",
      length: function(year) {
        return 30;
      }
    };
    this.ELUL = {
      name: "אֱלוּל",
      length: function(year) {
        return 29;
      }
    };
    this.MONTHS = {
      PESHUTA: [this.TISHRI, this.HESHVAN, this.KISLEV, this.TEVET, this.SHEVAT, this.ADAR, this.NISAN, this.IYAR, this.SIVAN, this.TAMUZ, this.AB, this.ELUL]
    };
    this.MONTHS.MEUBERET = this.MONTHS.PESHUTA.slice(0);
    this.MONTHS.MEUBERET.splice(this.MONTHS.PESHUTA.indexOf(this.ADAR), 1, this.ADAR_RISHON, this.ADAR_SHENI);
    this.MONTHS.ofYear = function(hebrewYear) {
      if (hebrewYear.isLeapYear()) {
        return this.MEUBERET;
      } else {
        return this.PESHUTA;
      }
    };
    return this.NAMES = (function() {
      var j, len, ref, results;
      ref = this.MONTHS.PESHUTA;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        month = ref[j];
        results.push(month.name);
      }
      return results;
    }).call(this);
  }).call(HebrewMonth);

  (typeof exports !== "undefined" && exports !== null ? exports : this).HebrewMonth = HebrewMonth;

  HebrewYear = (function() {
    function HebrewYear(gregorianDate) {
      var gregorianYear;
      gregorianYear = gregorianDate.getFullYear();
      this.yearFromCreation = gregorianYear + 3761;
      this.thisRoshHashana = new RoshHashana(this.yearFromCreation);
      if (this.thisRoshHashana.getGregorianDate() > gregorianDate) {
        this.nextRoshHashana = this.thisRoshHashana;
        this.yearFromCreation -= 1;
        this.thisRoshHashana = new RoshHashana(this.yearFromCreation);
      } else {
        this.nextRoshHashana = new RoshHashana(this.yearFromCreation + 1);
      }
      this.daysInYear = HebrewDate.HELPERS.durationInHebrewDays(this.nextRoshHashana, this.thisRoshHashana);
    }

    HebrewYear.prototype.getDaysInYear = function() {
      return this.daysInYear;
    };

    HebrewYear.prototype.getMonthsInYear = function() {
      if (this.isLeapYear()) {
        return 13;
      } else {
        return 12;
      }
    };

    HebrewYear.prototype.getThisRoshHashana = function() {
      return this.thisRoshHashana;
    };

    HebrewYear.prototype.getNextRoshHashana = function() {
      return this.nextRoshHashana;
    };

    HebrewYear.prototype.isLeapYear = function() {
      var ref;
      return (ref = this.daysInYear) === 383 || ref === 384 || ref === 385;
    };

    HebrewYear.prototype.getYearFromCreation = function() {
      return this.yearFromCreation;
    };

    HebrewYear.prototype.sedrot = function() {
      return new Sedra(this);
    };

    return HebrewYear;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).HebrewYear = HebrewYear;


  /*
    Molad takes a number of halakim as its sole constructor argument.
    Halakim of 0 indicates 6PM Friday night.
    Note that getDay() returns an integer using the same convention as Javascript's Date class--i.e. 0 == Sunday, 1 == Monday, etc.
    However, the constructor argument counts from Friday night because that is the convention in halachic literature.
   */

  positive_modulus = function(a, b) {
    return ((a % b) + b) % b;
  };

  leapMonthsElapsedInCurrent19YearCycle = function(n) {
    return Math.floor(3 * n / 8) - Math.floor(n / 16) + Math.floor(n / 17);
  };

  leapMonthsInHistory = function(n) {
    return Math.floor((n - 1) / 19) * 7 + leapMonthsElapsedInCurrent19YearCycle((n - 1) % 19);
  };

  Molad = (function() {
    function Molad(totalHalakim) {
      this.totalHalakim = positive_modulus(totalHalakim, Molad.HALAKIM_PER_WEEK);
      this.halakim = this.totalHalakim % Molad.HALAKIM_PER_HOUR;
      this.hours = Math.floor(this.totalHalakim / Molad.HALAKIM_PER_HOUR) % 24;
      this.day = positive_modulus(Math.floor(totalHalakim / Molad.HALAKIM_PER_DAY) + 6, 7);
      this.halakimIntoDay = this.totalHalakim % Molad.HALAKIM_PER_DAY;
    }

    Molad.prototype.getHalakim = function() {
      return this.halakim;
    };

    Molad.prototype.getHours = function() {
      return this.hours;
    };

    Molad.prototype.getDay = function() {
      return this.day;
    };

    Molad.prototype.getHalakimIntoDay = function() {
      return this.halakimIntoDay;
    };

    Molad.prototype.advance = function(months) {
      return new Molad(this.totalHalakim + months * Molad.LUNAR_CYCLE);
    };

    return Molad;

  })();

  (function() {
    this.HALAKIM_PER_HOUR = 1080;
    this.HALAKIM_PER_DAY = this.HALAKIM_PER_HOUR * 24;
    this.HALAKIM_PER_WEEK = this.HALAKIM_PER_DAY * 7;
    this.LUNAR_CYCLE = 29 * this.HALAKIM_PER_DAY + 12 * this.HALAKIM_PER_HOUR + 793;
    this.EPOCH = {
      molad: new Molad(9 * this.HALAKIM_PER_HOUR + 975),
      year: 5320,
      gregorianDate: new Date(1559, 8, 12)
    };
    this.leapMonthsSinceEpoch = function(hebrewYear) {
      return leapMonthsInHistory(hebrewYear) - leapMonthsInHistory(this.EPOCH.year);
    };
    this.monthSinceEpoch = function(hebrewYear) {
      return (hebrewYear - this.EPOCH.year) * 12 + this.leapMonthsSinceEpoch(hebrewYear);
    };
    this.daysSinceEpoch = function(hebrewYear) {
      return parseInt(((this.monthSinceEpoch(hebrewYear) * this.LUNAR_CYCLE) + this.EPOCH.molad.halakimIntoDay) / this.HALAKIM_PER_DAY);
    };
    return this.ofRoshHashanah = this.ofRoshHaShanah = this.ofRoshHashana = this.ofRoshHaShana = function(hebrewYear) {
      return this.EPOCH.molad.advance(this.monthSinceEpoch(hebrewYear));
    };
  }).call(Molad);

  (typeof exports !== "undefined" && exports !== null ? exports : this).Molad = Molad;

  RoshHashana = (function() {
    function RoshHashana(hebrewYear) {
      var dayOfWeek, halakim, ref, ref1, ref2;
      this.molad = Molad.ofRoshHashanah(hebrewYear);
      this.gregorianDateOfMolad = new Date(Molad.EPOCH.gregorianDate);
      this.gregorianDateOfMolad.setDate(Molad.EPOCH.gregorianDate.getDate() + Molad.daysSinceEpoch(hebrewYear));
      this.isLeapYear = (ref = hebrewYear % 19, indexOf.call(RoshHashana.GUCHADZAT, ref) >= 0);
      this.followsLeapYear = (ref1 = (hebrewYear - 1) % 19, indexOf.call(RoshHashana.GUCHADZAT, ref1) >= 0);
      dayOfWeek = this.gregorianDateOfMolad.getDay();
      this.dehiyot = new Array();
      this.gregorianDate = new Date(this.gregorianDateOfMolad);
      if (indexOf.call(RoshHashana.ADU, dayOfWeek) >= 0) {
        this.dehiyot.push('ADU');
      } else {
        halakim = this.molad.getHalakimIntoDay();
        if (halakim > RoshHashana.MOLAD_ZAQEN) {
          this.dehiyot.push('MOLAD ZAQEN');
        } else if (2 === dayOfWeek && halakim > RoshHashana.TARAD && !this.isLeapYear) {
          this.dehiyot.push('GATARAD');
        } else if (1 === dayOfWeek && halakim > RoshHashana.TUTAKPAT && this.followsLeapYear) {
          this.dehiyot.push('BETUTAKPAT');
        }
        if (1 === this.dehiyot.length && (ref2 = (dayOfWeek + 1) % 7, indexOf.call(RoshHashana.ADU, ref2) >= 0)) {
          this.dehiyot.push('ADU');
        }
      }
      HebrewDate.HELPERS.incrementDate(this.gregorianDate, this.dehiyot.length);
    }

    RoshHashana.prototype.getMolad = function() {
      return this.molad;
    };

    RoshHashana.prototype.getGregorianDateOfMolad = function() {
      return this.gregorianDateOfMolad;
    };

    RoshHashana.prototype.getGregorianDate = function() {
      return this.gregorianDate;
    };

    RoshHashana.prototype.getHebrewYear = function() {
      return new HebrewYear(this.gregorianDate);
    };

    return RoshHashana;

  })();

  (function() {
    this.GUCHADZAT = [3, 6, 8, 11, 14, 17, 19];
    this.ADU = [0, 3, 5];
    this.TARAD = Molad.HALAKIM_PER_HOUR * 9 + 204;
    this.TUTAKPAT = Molad.HALAKIM_PER_HOUR * 15 + 589;
    return this.MOLAD_ZAQEN = 18 * Molad.HALAKIM_PER_HOUR;
  }).call(RoshHashana);

  (typeof exports !== "undefined" && exports !== null ? exports : this).RoshHaShanah = (typeof exports !== "undefined" && exports !== null ? exports : this).RoshHaShana = (typeof exports !== "undefined" && exports !== null ? exports : this).RoshHashanah = (typeof exports !== "undefined" && exports !== null ? exports : this).RoshHashana = RoshHashana;

  Sedra = (function() {
    function Sedra(hebrewYear) {
      var isLeapYear, yearBeginsOn, yearEndsOn;
      yearBeginsOn = hebrewYear.getThisRoshHashana().getGregorianDate().getDay();
      yearEndsOn = hebrewYear.getNextRoshHashana().getGregorianDate().getDay();
      isLeapYear = hebrewYear.isLeapYear();
      this.sedrot = (isLeapYear ? Sedra.SEDROT : Sedra.PESHUTA_SEDROT).slice(0);
      if (!isLeapYear && (4 !== yearBeginsOn || 2 !== yearEndsOn)) {
        this.sedrot.splice(this.sedrot.indexOf('וַיַּקְהֵל'), 2, 'וַיַּקְהֵל-פְקוּדֵי');
      }
      switch (yearBeginsOn) {
        case 6:
          this.sedrot.splice(0, 0, '', 'רֹאשׁ הַשָּׁנָה', 'הַאֲזִינוּ', 'חַג הַסֻּכּוֹת', 'שְּׁמִינִי עֲצֶרֶת');
          break;
        case 4:
          this.sedrot.splice(0, 0, '', 'הַאֲזִינוּ', 'יוֹם הַכִּפֻּרִים', 'חַג הַסֻּכּוֹת');
          break;
        default:
          this.sedrot.splice(0, 0, '', 'וַיֵּלֶךְ', 'הַאֲזִינוּ', 'חַג הַסֻּכּוֹת');
      }
      switch (yearEndsOn) {
        case 6:
          this.sedrot.splice(this.sedrot.indexOf('חֻקַּת'), 2, 'חֻקַּת-בָּלָק');
          this.sedrot.splice(this.sedrot.indexOf('נָשֹׂא'), 0, 'חַג הַשָׁבֻעוֹת');
          this.sedrot.splice(this.sedrot.length - 4, 4, 'נִצָּבִים-וַיֵּלֶךְ', 'רֹאשׁ הַשָּׁנָה');
          break;
        case 4:
          this.sedrot.splice(this.sedrot.length - 4, 4, 'נִצָּבִים-וַיֵּלֶךְ', 'הַאֲזִינוּ');
          break;
        case 2:
          this.sedrot.splice(this.sedrot.length - 2, 2);
          break;
        case 1:
          this.sedrot.splice(this.sedrot.length - 2, 2);
      }
      if (4 !== yearEndsOn || !isLeapYear) {
        this.sedrot.splice(this.sedrot.indexOf('מַּטּוֹת'), 2, 'מַּטּוֹת-מַסְעֵי');
      }
      this.sedrot.splice(this.sedrot.length - 23, 0, 'חַג הַפֶּסַח');
      if (1 === yearEndsOn) {
        this.sedrot.splice(this.sedrot.length - 23, 0, 'אַחֲרוֹן שֶׁל פֶּסַח');
      }
    }

    Sedra.prototype.sedra = function(hebrewDate) {
      return this.sedrot[hebrewDate.weekOfYear()];
    };

    return Sedra;

  })();

  (function() {
    this.SEDROT = ['בְּרֵאשִׁית', 'נֹחַ', 'לֶךְ-לְךָ', 'וַיֵּרָא', 'חַיֵּי שָׂרָה', 'תּוֹלְדֹת', 'וַיֵּצֵא', 'וַיִּשְׁלַח', 'וַיֵּשֶׁב', 'מִקֵּץ', 'וַיִּגַּשׁ', 'וַיְחִי', 'שְׁמוֹת', 'וָאֵרָא', 'בֹּא', 'בְּשַׁלַּח', 'יִתְרוֹ', 'מִּשְׁפָּטִים', 'תְּרוּמָה', 'תְּצַוֶּה', 'כִּי תִשָּׂא', 'וַיַּקְהֵל', 'פְקוּדֵי', 'וַיִּקְרָא', 'צַו', 'שְּׁמִינִי', 'תַזְרִיעַ', 'מְּצֹרָע', 'אַחֲרֵי מוֹת', 'קְדֹשִׁים', 'אֱמֹר', 'בְּהַר סִינַי', 'בְּחֻקֹּתַי', 'בְּמִדְבַּר סִינַי', 'נָשֹׂא', 'בְּהַעֲלֹתְךָ', 'שְׁלַח', 'קֹרַח', 'חֻקַּת', 'בָּלָק', 'פִּינְחָס', 'מַּטּוֹת', 'מַסְעֵי', 'דְּבָרִים', 'וָאֶתְחַנַּן', 'עֵקֶב', 'רְאֵה', 'שֹׁפְטִים', 'כִּי-תֵצֵא', 'כִּי-תָבוֹא', 'נִצָּבִים', 'וַיֵּלֶךְ', 'הַאֲזִינוּ', 'וְזֹאת הַבְּרָכָה'];
    this.PESHUTA_SEDROT = this.SEDROT.slice(0);
    this.PESHUTA_SEDROT.splice(this.PESHUTA_SEDROT.indexOf('תַזְרִיעַ'), 2, 'תַזְרִיעַ-מְּצֹרָע');
    this.PESHUTA_SEDROT.splice(this.PESHUTA_SEDROT.indexOf('אַחֲרֵי מוֹת'), 2, 'אַחֲרֵי מוֹת-קְדֹשִׁים');
    return this.PESHUTA_SEDROT.splice(this.PESHUTA_SEDROT.indexOf('בְּהַר סִינַי'), 2, 'בְּהַר סִינַי-בְּחֻקֹּתַי');
  }).call(Sedra);

  (typeof exports !== "undefined" && exports !== null ? exports : this).Sedra = Sedra;

}).call(this);
